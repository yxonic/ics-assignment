%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Tue Sep 23 16:24:22 2014
%%Title: /home/yxonic/untitled2.sch
%%Author: yxonic
%%BoundingBox: 0 0 1173 662
%%Orientation: Portrait
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-34400 -42300 translate
35500 43400 36600 43400 10 line
36600 43400 36600 44500 10 line
36600 44500 35500 44500 10 line
35500 44500 35500 43400 10 line
gsave
false false false false 202.222224 [(PLUS) ] 0 35800 43900 180.555557 text
grestore
35700 44900 35700 44500 10 line
36400 44900 36400 44500 10 line
36600 44000 37000 44000 10 line
36000 43400 36000 43000 10 line
38500 43400 39600 43400 10 line
39600 43400 39600 44500 10 line
39600 44500 38500 44500 10 line
38500 44500 38500 43400 10 line
gsave
false false false false 202.222224 [(PLUS) ] 0 38800 43900 180.555557 text
grestore
38700 44900 38700 44500 10 line
39400 44900 39400 44500 10 line
39600 44000 40000 44000 10 line
39000 43400 39000 43000 10 line
41500 43400 42600 43400 10 line
42600 43400 42600 44500 10 line
42600 44500 41500 44500 10 line
41500 44500 41500 43400 10 line
gsave
false false false false 202.222224 [(PLUS) ] 0 41800 43900 180.555557 text
grestore
41700 44900 41700 44500 10 line
42400 44900 42400 44500 10 line
42600 44000 43000 44000 10 line
42000 43400 42000 43000 10 line
44500 43400 45600 43400 10 line
45600 43400 45600 44500 10 line
45600 44500 44500 44500 10 line
44500 44500 44500 43400 10 line
gsave
false false false false 202.222224 [(PLUS) ] 0 44800 43900 180.555557 text
grestore
44700 44900 44700 44500 10 line
45400 44900 45400 44500 10 line
45600 44000 46000 44000 10 line
45000 43400 45000 43000 10 line
gsave
39600 45200 39600 45500 10 line
gsave
false false false false 161.777776 [(15) ] 270 39650 45400 144.444443 text
grestore
gsave
false true false false 161.777776 [(X) ] 270 39600 45550 144.444443 text
grestore
39800 46100 39800 46400 10 line
gsave
false true false false 161.777776 [(2) ] 270 39850 46200 144.444443 text
grestore
gsave
false false false false 161.777776 [(X0) ] 270 39800 46050 144.444443 text
grestore
39400 46100 39400 46400 10 line
gsave
false true false false 161.777776 [(1) ] 270 39450 46200 144.444443 text
grestore
gsave
false false false false 161.777776 [(X1) ] 270 39400 46050 144.444443 text
grestore
40100 45800 40400 45800 10 line
gsave
false true false false 161.777776 [(10) ] 270 40200 45850 144.444443 text
grestore
gsave
true false false true 161.777776 [(S) ] 270 40050 45800 144.444443 text
grestore
39200 45500 40100 45500 10 line
40100 45500 40100 46100 10 line
40100 46100 39200 46100 10 line
39200 46100 39200 45500 10 line
gsave
false true false false 202.222224 [(4053) ] 270 39000 45500 180.555557 text
grestore
grestore
gsave
42600 45200 42600 45500 10 line
gsave
false false false false 161.777776 [(15) ] 270 42650 45400 144.444443 text
grestore
gsave
false true false false 161.777776 [(X) ] 270 42600 45550 144.444443 text
grestore
42800 46100 42800 46400 10 line
gsave
false true false false 161.777776 [(2) ] 270 42850 46200 144.444443 text
grestore
gsave
false false false false 161.777776 [(X0) ] 270 42800 46050 144.444443 text
grestore
42400 46100 42400 46400 10 line
gsave
false true false false 161.777776 [(1) ] 270 42450 46200 144.444443 text
grestore
gsave
false false false false 161.777776 [(X1) ] 270 42400 46050 144.444443 text
grestore
43100 45800 43400 45800 10 line
gsave
false true false false 161.777776 [(10) ] 270 43200 45850 144.444443 text
grestore
gsave
true false false true 161.777776 [(S) ] 270 43050 45800 144.444443 text
grestore
42200 45500 43100 45500 10 line
43100 45500 43100 46100 10 line
43100 46100 42200 46100 10 line
42200 46100 42200 45500 10 line
gsave
false true false false 202.222224 [(4053) ] 270 42000 45500 180.555557 text
grestore
grestore
gsave
45600 45200 45600 45500 10 line
gsave
false false false false 161.777776 [(15) ] 270 45650 45400 144.444443 text
grestore
gsave
false true false false 161.777776 [(X) ] 270 45600 45550 144.444443 text
grestore
45800 46100 45800 46400 10 line
gsave
false true false false 161.777776 [(2) ] 270 45850 46200 144.444443 text
grestore
gsave
false false false false 161.777776 [(X0) ] 270 45800 46050 144.444443 text
grestore
45400 46100 45400 46400 10 line
gsave
false true false false 161.777776 [(1) ] 270 45450 46200 144.444443 text
grestore
gsave
false false false false 161.777776 [(X1) ] 270 45400 46050 144.444443 text
grestore
46100 45800 46400 45800 10 line
gsave
false true false false 161.777776 [(10) ] 270 46200 45850 144.444443 text
grestore
gsave
true false false true 161.777776 [(S) ] 270 46050 45800 144.444443 text
grestore
45200 45500 46100 45500 10 line
46100 45500 46100 46100 10 line
46100 46100 45200 46100 10 line
45200 46100 45200 45500 10 line
gsave
false true false false 202.222224 [(4053) ] 270 45000 45500 180.555557 text
grestore
grestore
gsave
36600 45200 36600 45500 10 line
gsave
false false false false 161.777776 [(15) ] 270 36650 45400 144.444443 text
grestore
gsave
false true false false 161.777776 [(X) ] 270 36600 45550 144.444443 text
grestore
36800 46100 36800 46400 10 line
gsave
false true false false 161.777776 [(2) ] 270 36850 46200 144.444443 text
grestore
gsave
false false false false 161.777776 [(X0) ] 270 36800 46050 144.444443 text
grestore
36400 46100 36400 46400 10 line
gsave
false true false false 161.777776 [(1) ] 270 36450 46200 144.444443 text
grestore
gsave
false false false false 161.777776 [(X1) ] 270 36400 46050 144.444443 text
grestore
37100 45800 37400 45800 10 line
gsave
false true false false 161.777776 [(10) ] 270 37200 45850 144.444443 text
grestore
gsave
true false false true 161.777776 [(S) ] 270 37050 45800 144.444443 text
grestore
36200 45500 37100 45500 10 line
37100 45500 37100 46100 10 line
37100 46100 36200 46100 10 line
36200 46100 36200 45500 10 line
gsave
false true false false 202.222224 [(4053) ] 270 36000 45500 180.555557 text
grestore
grestore
36400 44900 36600 44900 10 line
36600 44900 36600 45200 10 line
39400 44900 39600 44900 10 line
39600 44900 39600 45200 10 line
42400 44900 42600 44900 10 line
42600 44900 42600 45200 10 line
45400 44900 45600 44900 10 line
45600 44900 45600 45200 10 line
37400 45800 37400 46800 10 line
37400 46800 49200 46800 10 line
46400 45800 46400 46800 10 line
43400 45800 43400 46800 10 line
40400 45800 40400 46800 10 line
35700 50600 35700 51000 10 line
36400 50600 36400 51000 10 line
38700 50600 38700 51000 10 line
39400 50600 39400 51000 10 line
41700 50600 41700 51000 10 line
42400 50600 42400 51000 10 line
44700 50600 44700 51000 10 line
45400 50600 45400 51000 10 line
36400 46400 36400 50600 10 line
39400 50600 39400 46400 10 line
42400 50600 42400 46400 10 line
45400 50600 45400 46400 10 line
35700 44900 35700 50600 10 line
38700 44900 38700 50600 10 line
41700 44900 41700 50600 10 line
44700 44900 44700 50600 10 line
34400 42300 50700 42300 10 line
50700 42300 50700 51500 10 line
50700 51500 34400 51500 10 line
34400 51500 34400 42300 10 line
gsave
false false false false 323.555552 [(S3) ] 0 35800 42700 288.888885 text
grestore
gsave
false false false false 323.555552 [(S2) ] 0 38800 42700 288.888885 text
grestore
gsave
false false false false 323.555552 [(S1) ] 0 41800 42700 288.888885 text
grestore
gsave
false false false false 323.555552 [(S0) ] 0 44800 42700 288.888885 text
grestore
gsave
false false false false 323.555552 [(A0) ] 0 44500 51100 288.888885 text
grestore
gsave
false false false false 323.555552 [(A1) ] 0 41500 51100 288.888885 text
grestore
gsave
false false false false 323.555552 [(A2) ] 0 38500 51100 288.888885 text
grestore
gsave
false false false false 323.555552 [(A3) ] 0 35500 51100 288.888885 text
grestore
gsave
false false false false 323.555552 [(B3) ] 0 36200 51100 288.888885 text
grestore
gsave
false false false false 323.555552 [(B2) ] 0 39200 51100 288.888885 text
grestore
gsave
false false false false 323.555552 [(B1) ] 0 42200 51100 288.888885 text
grestore
gsave
false false false false 323.555552 [(B0) ] 0 45200 51100 288.888885 text
grestore
gsave
false false false false 323.555552 [(X) ] 0 49300 46700 288.888885 text
grestore
37000 44000 38500 44000 10 line
40000 44000 41500 44000 10 line
43000 44000 44500 44000 10 line
46000 44000 47500 44000 10 line
47500 44000 47500 46800 10 line
gsave
37700 48600 37400 48100 10 line
37400 48100 37100 48600 10 line
37700 48600 37400 48600 10 line
37400 48600 37100 48600 10 line
37400 48050 50 0 360 10 darc
37400 48600 37400 48900 10 line
gsave
false true false false 161.777776 [(1) ] 270 37450 48700 144.444443 text
grestore
37400 47800 37400 48000 10 line
gsave
false false false false 161.777776 [(2) ] 270 37450 48000 144.444443 text
grestore
grestore
gsave
false false false false 202.222224 [(7404) ] 270 36900 48600 180.555557 text
grestore
gsave
43700 48600 43400 48100 10 line
43400 48100 43100 48600 10 line
43700 48600 43400 48600 10 line
43400 48600 43100 48600 10 line
43400 48050 50 0 360 10 darc
43400 48600 43400 48900 10 line
gsave
false true false false 161.777776 [(1) ] 270 43450 48700 144.444443 text
grestore
43400 47800 43400 48000 10 line
gsave
false false false false 161.777776 [(2) ] 270 43450 48000 144.444443 text
grestore
grestore
gsave
false false false false 202.222224 [(7404) ] 270 42900 48600 180.555557 text
grestore
gsave
46700 48600 46400 48100 10 line
46400 48100 46100 48600 10 line
46700 48600 46400 48600 10 line
46400 48600 46100 48600 10 line
46400 48050 50 0 360 10 darc
46400 48600 46400 48900 10 line
gsave
false true false false 161.777776 [(1) ] 270 46450 48700 144.444443 text
grestore
46400 47800 46400 48000 10 line
gsave
false false false false 161.777776 [(2) ] 270 46450 48000 144.444443 text
grestore
grestore
gsave
false false false false 202.222224 [(7404) ] 270 45900 48600 180.555557 text
grestore
gsave
40700 48600 40400 48100 10 line
40400 48100 40100 48600 10 line
40700 48600 40400 48600 10 line
40400 48600 40100 48600 10 line
40400 48050 50 0 360 10 darc
40400 48600 40400 48900 10 line
gsave
false true false false 161.777776 [(1) ] 270 40450 48700 144.444443 text
grestore
40400 47800 40400 48000 10 line
gsave
false false false false 161.777776 [(2) ] 270 40450 48000 144.444443 text
grestore
grestore
gsave
false false false false 202.222224 [(7404) ] 270 39900 48600 180.555557 text
grestore
36400 50000 37400 50000 10 line
37400 50000 37400 48900 10 line
36800 46400 36800 47800 10 line
36800 47800 37400 47800 10 line
39800 46400 39800 47800 10 line
39800 47800 40400 47800 10 line
42800 46400 42800 47800 10 line
42800 47800 43400 47800 10 line
45800 46400 45800 47800 10 line
45800 47800 46400 47800 10 line
39400 50000 40400 50000 10 line
40400 50000 40400 48900 10 line
42400 50000 43400 50000 10 line
43400 50000 43400 48900 10 line
45400 50000 46400 50000 10 line
46400 48900 46400 50000 10 line
60 60 36370 44870 fbox
60 60 39370 44870 fbox
60 60 42370 44870 fbox
60 60 45370 44870 fbox
gsave
[ 1.00 -0.00 0.00 1.00 49200 46800 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
46400 46800
25
0 360 arc
fill
newpath
43400 46800
25
0 360 arc
fill
newpath
40400 46800
25
0 360 arc
fill
newpath
47500 46800
25
0 360 arc
fill
newpath
46400 46800
25
0 360 arc
fill
newpath
46400 46800
25
0 360 arc
fill
newpath
43400 46800
25
0 360 arc
fill
newpath
43400 46800
25
0 360 arc
fill
newpath
40400 46800
25
0 360 arc
fill
newpath
40400 46800
25
0 360 arc
fill
newpath
36400 50000
25
0 360 arc
fill
newpath
39400 50000
25
0 360 arc
fill
newpath
42400 50000
25
0 360 arc
fill
newpath
45400 50000
25
0 360 arc
fill
60 60 35670 44870 fbox
60 60 38670 44870 fbox
60 60 41670 44870 fbox
60 60 44670 44870 fbox
60 60 36970 43970 fbox
60 60 38470 43970 fbox
60 60 39970 43970 fbox
60 60 41470 43970 fbox
60 60 42970 43970 fbox
60 60 44470 43970 fbox
gsave
[ -1.00 -0.00 0.00 -1.00 46000 44000 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
47500 46800
25
0 360 arc
fill
newpath
47500 46800
25
0 360 arc
fill
newpath
36400 50000
25
0 360 arc
fill
newpath
36400 50000
25
0 360 arc
fill
newpath
39400 50000
25
0 360 arc
fill
newpath
39400 50000
25
0 360 arc
fill
newpath
42400 50000
25
0 360 arc
fill
newpath
42400 50000
25
0 360 arc
fill
newpath
45400 50000
25
0 360 arc
fill
newpath
45400 50000
25
0 360 arc
fill
showpage
%%End
